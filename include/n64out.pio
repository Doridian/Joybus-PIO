.program n64out

.wrap_target
wrap_target:

pull block
out x 16
jmp !x outnext_start
out x 8
jmp !x write_single

;doread:
in null 24
nextread:
    wait 0 pin 0 [31] ; wait for gamepad LOW assertion
    in pins 1
    wait 1 pin 0 ; wait for gamepad HIGH/release
    out null 1
    jmp !osre nextread
push
jmp wrap_target

; output stop-bit instead of real bit
outnext_start:
out null 1
write_single:
out null 7
outnext:
    ; wait loop for Y 
    set pindirs, 1 [15]
    ; set to low if we are on a low bit
    out pindirs, 1 [31]
    set pindirs, 0 [14]
    jmp !osre outnext

% c-sdk {
static inline void n64out_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    pio_sm_config c = n64out_program_get_default_config(offset);
    sm_config_set_in_pins(&c, pin);
    sm_config_set_out_pins(&c, pin, 1);
    sm_config_set_set_pins(&c, pin, 1);
    //sm_config_set_sideset_pins(&c, pin);

    sm_config_set_out_shift(&c, false, false, 32);
    sm_config_set_in_shift(&c, false, false, 32);
    
    float frac = (clock_get_hz(clk_sys) / 1000000) / 16;
    sm_config_set_clkdiv(&c, frac);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}
