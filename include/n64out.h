// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// n64out //
// ------ //

#define n64out_wrap_target 2
#define n64out_wrap 30

static const uint16_t n64out_program_instructions[] = {
    0x90a0, //  0: pull   block           side 0     
    0x6040, //  1: out    y, 32                      
            //     .wrap_target
    0x80a0, //  2: pull   block                      
    0x6030, //  3: out    x, 16                      
    0x0033, //  4: jmp    !x, 19                     
    0x6028, //  5: out    x, 8                       
    0x0034, //  6: jmp    !x, 20                     
    0x5078, //  7: in     null, 24        side 0     
    0x2020, //  8: wait   0 pin, 0                   
    0xa022, //  9: mov    x, y                       
    0x004a, // 10: jmp    x--, 10                    
    0xa022, // 11: mov    x, y                       
    0x004c, // 12: jmp    x--, 12                    
    0x4001, // 13: in     pins, 1                    
    0x20a0, // 14: wait   1 pin, 0                   
    0x6061, // 15: out    null, 1                    
    0x00e8, // 16: jmp    !osre, 8                   
    0x8020, // 17: push   block                      
    0x0002, // 18: jmp    2                          
    0x6061, // 19: out    null, 1                    
    0x6067, // 20: out    null, 7                    
    0xb822, // 21: mov    x, y            side 1     
    0x0056, // 22: jmp    x--, 22                    
    0x6081, // 23: out    pindirs, 1                 
    0xa022, // 24: mov    x, y                       
    0x0059, // 25: jmp    x--, 25                    
    0xa022, // 26: mov    x, y                       
    0x005b, // 27: jmp    x--, 27                    
    0xb022, // 28: mov    x, y            side 0     
    0x005d, // 29: jmp    x--, 29                    
    0x00f5, // 30: jmp    !osre, 21                  
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program n64out_program = {
    .instructions = n64out_program_instructions,
    .length = 31,
    .origin = -1,
};

static inline pio_sm_config n64out_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + n64out_wrap_target, offset + n64out_wrap);
    sm_config_set_sideset(&c, 2, true, true);
    return c;
}

static inline void n64out_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    pio_sm_config c = n64out_program_get_default_config(offset);
    sm_config_set_in_pins(&c, pin);
    sm_config_set_out_pins(&c, pin, 1);
    sm_config_set_set_pins(&c, pin, 1);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_out_shift(&c, false, false, 32);
    sm_config_set_in_shift(&c, false, false, 32);
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
    pio->txf[sm] = (clock_get_hz(clk_sys) / 1000000) - 3;
}

#endif
