// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// n64out //
// ------ //

#define n64out_wrap_target 0
#define n64out_wrap 26

static const uint16_t n64out_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block                      
    0xa0c3, //  1: mov    isr, null                  
    0x60c2, //  2: out    isr, 2                     
    0x4063, //  3: in     null, 3                    
    0xa026, //  4: mov    x, isr                     
    0xa0c3, //  5: mov    isr, null                  
    0x60c6, //  6: out    isr, 6                     
    0x4063, //  7: in     null, 3                    
    0xa046, //  8: mov    y, isr                     
    0x0030, //  9: jmp    !x, 16                     
    0x004c, // 10: jmp    x--, 12                    
    0xea80, // 11: set    pindirs, 0             [10]
    0xef81, // 12: set    pindirs, 1             [15]
    0x7f81, // 13: out    pindirs, 1             [31]
    0xe380, // 14: set    pindirs, 0             [3] 
    0x004b, // 15: jmp    x--, 11                    
    0x0060, // 16: jmp    !y, 0                      
    0xe980, // 17: set    pindirs, 0             [9] 
    0xef81, // 18: set    pindirs, 1             [15]
    0xef80, // 19: set    pindirs, 0             [15]
    0xa0c3, // 20: mov    isr, null                  
    0x0096, // 21: jmp    y--, 22                    
    0x3f20, // 22: wait   0 pin, 0               [31]
    0x4001, // 23: in     pins, 1                    
    0x20a0, // 24: wait   1 pin, 0                   
    0x0096, // 25: jmp    y--, 22                    
    0x8020, // 26: push   block                      
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program n64out_program = {
    .instructions = n64out_program_instructions,
    .length = 27,
    .origin = -1,
};

static inline pio_sm_config n64out_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + n64out_wrap_target, offset + n64out_wrap);
    return c;
}

static inline void n64out_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_set_enabled(pio, sm, false);
    gpio_set_dir(pin, GPIO_IN);
    gpio_disable_pulls(pin);
    gpio_set_oeover(pin, GPIO_OVERRIDE_HIGH);
    gpio_set_outover(pin, GPIO_OVERRIDE_LOW);
    pio_sm_config c = n64out_program_get_default_config(offset);
    sm_config_set_in_pins(&c, pin);
    sm_config_set_out_pins(&c, pin, 1);
    sm_config_set_set_pins(&c, pin, 1);
    sm_config_set_out_shift(&c, false, false, 32);
    sm_config_set_in_shift(&c, false, true, 32);
    float frac = (clock_get_hz(clk_sys) / 1000000) / 16;
    sm_config_set_clkdiv(&c, frac);
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif
